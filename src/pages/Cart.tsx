import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { ShoppingCart, Minus, Plus, Trash2, Package, ArrowLeft } from 'lucide-react';
import { useCart } from '@/hooks/useCart';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import type { Database } from '@/integrations/supabase/types';
import { toast } from '@/hooks/use-toast';

const Cart = () => {
  const { cartItems, updateQuantity, removeFromCart, getCartTotal, clearCart, loading } = useCart();
  const { user } = useAuth();
  const navigate = useNavigate();
  const [isCheckingOut, setIsCheckingOut] = useState(false);
  const [checkoutData, setCheckoutData] = useState({
    deliveryMethod: 'delivery',
    paymentMethod: 'cash',
    address: '',
    references: '',
    notes: ''
  });

  const deliveryFee = checkoutData.deliveryMethod === 'delivery' ? 3.00 : 0;
  const total = getCartTotal() + deliveryFee;

  if (!user) {
    return (
      <div className="container py-8">
        <div className="text-center space-y-4">
          <ShoppingCart className="h-16 w-16 mx-auto text-muted-foreground" />
          <h2 className="text-2xl font-bold">Inicia sesión para ver tu carrito</h2>
          <p className="text-muted-foreground">
            Necesitas una cuenta para agregar productos al carrito
          </p>
          <Button onClick={() => navigate('/auth')}>
            Iniciar Sesión
          </Button>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="container py-8">
        <div className="space-y-4">
          <div className="h-8 bg-muted rounded animate-pulse"></div>
          {[...Array(3)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-4">
                <div className="flex gap-4">
                  <div className="w-20 h-20 bg-muted rounded"></div>
                  <div className="flex-1 space-y-2">
                    <div className="h-4 bg-muted rounded w-3/4"></div>
                    <div className="h-4 bg-muted rounded w-1/2"></div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (cartItems.length === 0) {
    return (
      <div className="container py-8">
        <div className="text-center space-y-4">
          <ShoppingCart className="h-16 w-16 mx-auto text-muted-foreground" />
          <h2 className="text-2xl font-bold">Tu carrito está vacío</h2>
          <p className="text-muted-foreground">
            Agrega algunos productos para empezar tu compra
          </p>
          <Button onClick={() => navigate('/products')}>
            Ver Productos
          </Button>
        </div>
      </div>
    );
  }

  const handleQuantityChange = (cartItemId: string, newQuantity: number) => {
    if (newQuantity < 1) return;
    updateQuantity(cartItemId, newQuantity);
  };

  const handleCheckout = async () => {
    if (!user) return;
    
    if (checkoutData.deliveryMethod === 'delivery' && !checkoutData.address.trim()) {
      toast({
        title: "Dirección requerida",
        description: "Por favor ingresa tu dirección de entrega",
        variant: "destructive"
      });
      return;
    }

    setIsCheckingOut(true);
    
    try {
      // Create order
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert({
          user_id: user.id,
          delivery_method: checkoutData.deliveryMethod as Database['public']['Enums']['delivery_method'],
          payment_method: checkoutData.paymentMethod as Database['public']['Enums']['payment_method'],
          subtotal: getCartTotal(),
          delivery_fee: deliveryFee,
          total: total,
          order_number: '', // Will be auto-generated by trigger
          delivery_address: checkoutData.deliveryMethod === 'delivery' ? checkoutData.address : null,
          delivery_references: checkoutData.references || null,
          notes: checkoutData.notes || null
        })
        .select()
        .single();

      if (orderError) throw orderError;

      // Create order items
      const orderItems = cartItems.map(item => ({
        order_id: order.id,
        product_id: item.product_id,
        product_name: item.product.name,
        product_price: item.product.price,
        quantity: item.quantity,
        unit_price: item.product.price,
        total_price: item.product.price * item.quantity
      }));

      const { error: itemsError } = await supabase
        .from('order_items')
        .insert(orderItems);

      if (itemsError) throw itemsError;

      // Clear cart
      await clearCart();

      toast({
        title: "¡Pedido realizado!",
        description: `Tu pedido ${order.order_number} ha sido confirmado`
      });

      navigate('/orders');
    } catch (error: any) {
      toast({
        title: "Error",
        description: "No se pudo procesar el pedido. Intenta nuevamente.",
        variant: "destructive"
      });
    } finally {
      setIsCheckingOut(false);
    }
  };

  return (
    <div className="container py-8 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="icon" onClick={() => navigate(-1)}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h1 className="text-3xl font-bold">Mi Carrito</h1>
        <Badge variant="secondary">
          {cartItems.length} producto{cartItems.length !== 1 ? 's' : ''}
        </Badge>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Cart Items */}
        <div className="lg:col-span-2 space-y-4">
          {cartItems.map((item) => (
            <Card key={item.id}>
              <CardContent className="p-4">
                <div className="flex gap-4">
                  <div className="w-20 h-20 bg-gradient-to-br from-primary/5 to-accent/5 rounded-lg flex items-center justify-center">
                    {item.product.image_url ? (
                      <img
                        src={item.product.image_url}
                        alt={item.product.name}
                        className="w-full h-full object-cover rounded-lg"
                      />
                    ) : (
                      <Package className="h-8 w-8 text-muted-foreground" />
                    )}
                  </div>
                  
                  <div className="flex-1">
                    <h3 className="font-semibold text-lg">{item.product.name}</h3>
                    <p className="text-sm text-muted-foreground">
                      ${item.product.price.toFixed(2)} / {item.product.unit}
                    </p>
                    
                    <div className="flex items-center justify-between mt-4">
                      <div className="flex items-center gap-2">
                        <Button
                          variant="outline"
                          size="icon"
                          onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                          disabled={item.quantity <= 1}
                        >
                          <Minus className="h-4 w-4" />
                        </Button>
                        <span className="w-12 text-center font-semibold">
                          {item.quantity}
                        </span>
                        <Button
                          variant="outline"
                          size="icon"
                          onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                        >
                          <Plus className="h-4 w-4" />
                        </Button>
                      </div>
                      
                      <div className="flex items-center gap-4">
                        <span className="font-bold text-xl text-primary">
                          ${(item.product.price * item.quantity).toFixed(2)}
                        </span>
                        <Button
                          variant="destructive"
                          size="icon"
                          onClick={() => removeFromCart(item.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Checkout */}
        <div className="space-y-6">
          {/* Order Summary */}
          <Card>
            <CardHeader>
              <CardTitle>Resumen del Pedido</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex justify-between">
                <span>Subtotal:</span>
                <span>${getCartTotal().toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Envío:</span>
                <span>${deliveryFee.toFixed(2)}</span>
              </div>
              <Separator />
              <div className="flex justify-between text-lg font-bold">
                <span>Total:</span>
                <span className="text-primary">${total.toFixed(2)}</span>
              </div>
            </CardContent>
          </Card>

          {/* Delivery Method */}
          <Card>
            <CardHeader>
              <CardTitle>Método de Entrega</CardTitle>
            </CardHeader>
            <CardContent>
              <RadioGroup
                value={checkoutData.deliveryMethod}
                onValueChange={(value) => setCheckoutData(prev => ({ ...prev, deliveryMethod: value }))}
              >
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="delivery" id="delivery" />
                  <Label htmlFor="delivery">Entrega a domicilio (+$3.00)</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="pickup" id="pickup" />
                  <Label htmlFor="pickup">Recoger en tienda (Gratis)</Label>
                </div>
              </RadioGroup>

              {checkoutData.deliveryMethod === 'delivery' && (
                <div className="mt-4 space-y-4">
                  <div>
                    <Label htmlFor="address">Dirección de entrega *</Label>
                    <Textarea
                      id="address"
                      placeholder="Ingresa tu dirección completa..."
                      value={checkoutData.address}
                      onChange={(e) => setCheckoutData(prev => ({ ...prev, address: e.target.value }))}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="references">Referencias</Label>
                    <Input
                      id="references"
                      placeholder="Casa azul, entre calles..."
                      value={checkoutData.references}
                      onChange={(e) => setCheckoutData(prev => ({ ...prev, references: e.target.value }))}
                    />
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Payment Method */}
          <Card>
            <CardHeader>
              <CardTitle>Método de Pago</CardTitle>
            </CardHeader>
            <CardContent>
              <Select
                value={checkoutData.paymentMethod}
                onValueChange={(value) => setCheckoutData(prev => ({ ...prev, paymentMethod: value }))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="cash">Efectivo al recibir</SelectItem>
                  <SelectItem value="transfer">Transferencia bancaria</SelectItem>
                  <SelectItem value="zelle">Zelle</SelectItem>
                  <SelectItem value="mobile_payment">Pago móvil</SelectItem>
                </SelectContent>
              </Select>
            </CardContent>
          </Card>

          {/* Notes */}
          <Card>
            <CardHeader>
              <CardTitle>Notas del Pedido</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                placeholder="Comentarios adicionales..."
                value={checkoutData.notes}
                onChange={(e) => setCheckoutData(prev => ({ ...prev, notes: e.target.value }))}
              />
            </CardContent>
          </Card>

          {/* Checkout Button */}
          <Button
            className="w-full"
            size="lg"
            onClick={handleCheckout}
            disabled={isCheckingOut}
          >
            {isCheckingOut ? 'Procesando...' : 'Confirmar Pedido'}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Cart;